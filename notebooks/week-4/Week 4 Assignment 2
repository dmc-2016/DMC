{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assignment - part 2\n",
    "\n",
    "Now that we have a better understanding of how to set up a basic neural network in Tensorflow, let's see if we can convert our dataset to a classificiation problem, and then rework our neural network to solve it. I will replicate most of our code from the previous assignment below, but leave blank spots where you should implement changes to convert our regression model into a classification one. Look for text descriptions above code blocks explaining the changes that need to be made, and `#UPPERCASE COMMENTS` where the new code should be written."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import math\n",
    "import random\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.datasets import load_boston\n",
    "\n",
    "'''Since this is a classification problem, we will need to \n",
    "represent our targets as one-hot encoding vectors (see previous lab).\n",
    "To do this we will use scikit-learn's OneHotEncoder module \n",
    "which we import here'''\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "sns.set(style=\"ticks\", color_codes=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Target data format\n",
    "\n",
    "The first step is to change the target of the dataset from a continuous variable (the value of the house) to a categorical one. In this case we will change it to have two categories, specifying whether the value of the house is higher or lower than the average.\n",
    "\n",
    "In the code block below, write code to change the ‘target’ column to a categorical variable instead of a continuous one. This variable should be 1 if the target is higher than the average value, and 0 if it is lower. You can use np.mean() to calculate the average value. Then, you can iterate over all entries in the column, and compare each value to the average to decide if it is higher or lower. Finally, you can use the int() function to convert the True/False values to 0 and 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dataset = load_boston()\n",
    "houses = pd.DataFrame(dataset.data, columns=dataset.feature_names)\n",
    "\n",
    "averagevalue = np.mean(dataset.target)\n",
    "\n",
    "houses['target'] = (dataset.target > averagevalue).astype(int)\n",
    "\n",
    "# WRITE CODE TO CONVERT 'TARGET' COLUMN FROM CONTINUOUS TO CATEGORICAL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 <-- should be 1\n",
      "0 <-- should be 0\n"
     ]
    }
   ],
   "source": [
    "'''check your work'''\n",
    "print np.max(houses['target']), \"<-- should be 1\"\n",
    "print np.min(houses['target']), \"<-- should be 0\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Target data encoding\n",
    "\n",
    "Since we are now dealing with a classification problem, our target values need to be encoded using one-hot encoding (OHE) (see Lab 3 for a description of what this is and why it's necessary). In the code block below, use scikit-learn's `OneHotEncoder()` module to ocnvert the y target array to OHE.\n",
    "\n",
    "_hint_: when you create the onehotencoder object, pass in the variable sparse=false to give the resulting data the proper formatting each value in y should be a two-part array, either [0,1] or [1,0] depending on the target value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Training set', (354, 13), (354, 2))\n",
      "('Test set', (152, 13), (152, 2))\n"
     ]
    }
   ],
   "source": [
    "houses_array = houses.as_matrix().astype(float)\n",
    "np.random.shuffle(houses_array)\n",
    "\n",
    "X = houses_array[:, :-1]\n",
    "y = houses_array[:, -1]\n",
    "\n",
    "# USE SCIKIT-LEARN'S ONE-HOT ENCODING MODULE TO \n",
    "# CONVERT THE y ARRAY OF TARGETS TO ONE-HOT ENCODING.\n",
    "\n",
    "y=y.reshape(-1,1)\n",
    "enc=OneHotEncoder()\n",
    "enc.fit(y)\n",
    "y=enc.transform(y).toarray()\n",
    "\n",
    "X = X / X.max(axis=0)\n",
    "\n",
    "trainingSplit = int(.7 * houses_array.shape[0])\n",
    "X_train = X[:trainingSplit]\n",
    "y_train = y[:trainingSplit]\n",
    "X_test = X[trainingSplit:]\n",
    "y_test = y[trainingSplit:]\n",
    "\n",
    "print('Training set', X_train.shape, y_train.shape)\n",
    "print('Test set', X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 <-- should be 2\n",
      "2 <-- should be 2\n",
      "[ 1.  0.] <-- should be either [0. 1.] or [1. 0.]\n"
     ]
    }
   ],
   "source": [
    "'''check your work'''\n",
    "print y_train.shape[1], \"<-- should be 2\"\n",
    "print y_test.shape[1], \"<-- should be 2\"\n",
    "print y_train[0], \"<-- should be either [0. 1.] or [1. 0.]\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# helper variables\n",
    "num_samples = X_train.shape[0]\n",
    "num_features = X_train.shape[1]\n",
    "num_outputs = y_train.shape[1]\n",
    "\n",
    "# Hyper-parameters\n",
    "batch_size = 18\n",
    "num_hidden_1 = 30\n",
    "num_hidden_2 =  30\n",
    "learning_rate =  0.1\n",
    "training_epochs =  500\n",
    "dropout_keep_prob = 1 # 0.5 # set to no dropout by default\n",
    "\n",
    "# variable to control the resolution at which the training results are stored\n",
    "display_step = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Perfomance measure\n",
    "\n",
    "Instead of measuring the average error in the prediction of a continuous variable, we now want our performance measure to be the number of samples for which we guess the right category.\n",
    "\n",
    "As before, this function takes in an array of predictions and an array of targets. This time, however, each prediction or target is represented by a two-piece array. With the predictions, the two values represent the confidence of the system for choosing either value as the category. Because these predictions are generated through the [softmax function](https://en.wikipedia.org/wiki/Softmax_function), they are guaranteed to add up to 1.0, so they can be interpreted as the percentage of confidence behind each category. In our two category example,\n",
    "\n",
    "- A prediction of [1,0] means complete confidence that the sample belongs in the first category\n",
    "- A prediction of [0,1] means complete confidence that the sample belongs in the second category\n",
    "- A prediction of [0.5,0.5] means the system is split, and cannot clearly decide which category the sample belongs to.\n",
    "\n",
    "With the targets, the two values are the one-hot encodings generated previously. You can now see how the one-hot encoding actually represents the target values in the same format as the predictions coming from the model. This is helpful because while the model is training all it has to do is try to  match the prediction arrays to the encoded targets. Infact, this is exactly what our modified cost function will do.\n",
    "\n",
    "For our accuracy measure, we want to take these two arrays of predictions and targets, see how many of them match (correct classification), then devide by the total number of predictions to get the ratio of accurate guesses, and multiply by 100.0 to convert it to a percentage.\n",
    "\n",
    "_hints:_ \n",
    "\n",
    "- numpy's np.argmax() function will give you the position of the largest value in the array along an axis, so executing np.argmax(predictions, 1) will convert the confidence measures to the single most likely category.\n",
    "- once you have a list of single-value predictions, you can compare them using the '==' operator to see how many match (matches result in a 'True' and mismatches result in a 'False')\n",
    "- you can use numpy's np.sum() function to find out the total number of 'True' statements, and divide them by the total number of predictions to get the ratio of accurate predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def accuracy(predictions, targets):\n",
    "    \n",
    "    # IMPLEMENT THE NEW ACCURACY MEASURE HERE\n",
    "    maxPredictions=np.argmax(predictions,1)\n",
    "    maxTarget=np.argmax(targets,1)\n",
    "    accuracy = (np.sum((maxPredictions==maxTarget))/float(maxPredictions.shape[0]))*100\n",
    "    \n",
    "    return accuracy\n",
    "\n",
    "def weight_variable(shape):\n",
    "    initial = tf.truncated_normal(shape, stddev=0.1)\n",
    "    return tf.Variable(initial)\n",
    "\n",
    "def bias_variable(shape):\n",
    "    initial = tf.constant(0.1, shape=shape)\n",
    "    return tf.Variable(initial)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Model definition\n",
    "\n",
    "For the most part, our model definition will stay roughtly the same. The major difference is that the final layer in our network now contains two values, which are interpreted as the confidence that the network has in classifying each input set of data as belonging to either the first or second category. \n",
    "\n",
    "However, as the raw output of the network, these outputs can take on any value. In order to interpret them for categorization it is typical to use the softmax function, which converts a range of values to a probability distribution along a number of categories. For example, if the outputs from the network from a given input are [1,000,000 and 10], we would like to interpret that as [0.99 and 0.01], or almost full confidence that the sample belongs in the first category. Similarly, if the outputs are closer together, such as 10 and 5, we would like to interpret it as something like [0.7 and 0.3], which shows that the first category is still more likely, but it is not as confident as before. This is exactly what the softmax function does. The exact formulation of the softmax function is not so important, as long as you know that the goal is to take the raw outputs from the neural network, and convert them to a set of values that preserve the relationship between the outputs while summing up to 1.0.\n",
    "\n",
    "To adapt our code for classification, we simply have to wrap all of our outputs in a `tf.nn.softmax()` function, which will convert the raw outputs to confidence measures. We will also replace the MSE error function with a cross-entropy function which performs better with classification tasks. Look for comments below for implementation details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "graph = tf.Graph()\n",
    "\n",
    "with graph.as_default():\n",
    "    \n",
    "    x = tf.placeholder(tf.float32, shape=(None, num_features))\n",
    "    _y = tf.placeholder(tf.float32, shape=(None))\n",
    "    \n",
    "    keep_prob = tf.placeholder(tf.float32)\n",
    "    \n",
    "    tf_X_test = tf.constant(X_test, dtype=tf.float32)\n",
    "    tf_X_train = tf.constant(X_train, dtype=tf.float32)\n",
    "    \n",
    "    \n",
    "    W_fc1 = weight_variable([num_features, num_hidden_1])\n",
    "    b_fc1 = bias_variable([num_hidden_1])\n",
    "    \n",
    "    W_fc2 = weight_variable([num_hidden_1, num_hidden_2])\n",
    "    b_fc2 = bias_variable([num_hidden_2])\n",
    "    \n",
    "    W_fc3 = weight_variable([num_hidden_2, num_outputs])\n",
    "    b_fc3 = bias_variable([num_outputs])\n",
    "    \n",
    "    \n",
    "    def model(data, keep):\n",
    "        \n",
    "        fc1 = tf.nn.sigmoid(tf.matmul(data, W_fc1) + b_fc1)\n",
    "        fc1_drop = tf.nn.dropout(fc1, keep)\n",
    "        \n",
    "        fc2 = tf.nn.sigmoid(tf.matmul(fc1_drop, W_fc2) + b_fc2)\n",
    "        fc2_drop = tf.nn.dropout(fc2, keep)\n",
    "        \n",
    "        fc3 = tf.matmul(fc2_drop, W_fc3) + b_fc3\n",
    "        \n",
    "        return fc3\n",
    "    \n",
    "    '''for our loss function we still want to get the raw outputs \n",
    "    of the model, but since it no longer represents the actual prediction \n",
    "    we rename the variable to ‘output’'''\n",
    "    output = model(x, keep_prob)\n",
    "    \n",
    "    # WHEN WE CALCULATE THE PREDICTIONS, WE NEED TO WRAP EACH OUTPUT IN A\n",
    "    # tf.nn.softmax() FUNCTION. THE FIRST ONE HAS BEEN DONE FOR YOU:\n",
    "    prediction = tf.nn.softmax(output)\n",
    "    test_prediction = model(tf_X_test, 1.0)\n",
    "    train_prediction = model(tf_X_train, 1.0)\n",
    "    \n",
    "    '''finally, we replace our previous MSE cost function with the\n",
    "    cross-entropy function included in Tensorflow. This function takes in the\n",
    "    raw output of the network and calculates the average loss with the target'''\n",
    "    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(output, _y))\n",
    "    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)\n",
    "    \n",
    "    saver = tf.train.Saver()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have replaced the relevant accuracy measures and loss function, our training process is exactly the same, meaning we can run the same training process and plotting code to visualize the results. The only difference is that with classificiation we are using an accuracy rather than an error measure, so the better our model is performing, the higher the graph should be (higher accuracy is better, while lower error is better)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initialized\n",
      "Model saved in file: model_houses_classification.ckpt\n"
     ]
    }
   ],
   "source": [
    "results = []\n",
    "\n",
    "with tf.Session(graph=graph) as session:\n",
    "    \n",
    "    tf.initialize_all_variables().run()\n",
    "    print('Initialized')\n",
    "\n",
    "    for epoch in range(training_epochs):\n",
    "        \n",
    "        indexes = range(num_samples)\n",
    "        random.shuffle(indexes)\n",
    "        \n",
    "        for step in range(int(math.floor(num_samples/float(batch_size)))):\n",
    "            offset = step * batch_size\n",
    "            \n",
    "            batch_data = X_train[indexes[offset:(offset + batch_size)]]\n",
    "            batch_labels = y_train[indexes[offset:(offset + batch_size)]]\n",
    "\n",
    "            feed_dict = {x : batch_data, _y : batch_labels, keep_prob: dropout_keep_prob}\n",
    "            \n",
    "            _, l, p = session.run([optimizer, loss, prediction], feed_dict=feed_dict)\n",
    "\n",
    "        if (epoch % display_step == 0):\n",
    "            batch_acc = accuracy(p, batch_labels)\n",
    "            train_acc =  accuracy(train_prediction.eval(session=session), y_train)\n",
    "            test_acc =  accuracy(test_prediction.eval(session=session), y_test)\n",
    "            results.append([epoch, batch_acc, train_acc, test_acc])\n",
    "\n",
    "    save_path = saver.save(session, \"model_houses_classification.ckpt\")\n",
    "    print(\"Model saved in file: %s\" % save_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum test accuracy: 92.76%\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nqGmcUF0LANDHIrCE5Ixa2j7xZY8AYHTJJY7WdAyBs+cBKK35tR2oDdc4hM1EiIiIiKgYDNQ0Tu/M\nDr2uCcuBmlDjHOnyksodep3sugAg05pfw8OugeGzZ2zPT0RERETFYKCmcZa6bLCkgzzHzOCcnEDN\nkTOrTcjMUPPrrWjQeEZtuKCMpY9EREREVAwGahrnaBzahj93GPVEqpneMORY1OxAlU3bQYvFpIdO\nlz9+gM1EiIiIiKgYDNQ0zjnNhaSQ/4/ZNsHDrhU1DUPXNricmp6hBshNXC7NqjGjRkRERETFYKCm\nca5qKwJ6W96xqsahma6JYDSICBry17bWTU6QONXslwy4vvT3RERERESjYaCmca5qMwJidk9YGgJq\nhimHnChRU3Zm2mSvPZUu7fLI0kciIiIiKgYDNY2rrTLDn5PVCugtqHaYJ239uDU7sy2gt6DBre1h\n14rcUkezUYRBP/EDxomIiIhIOxioaZxBr0Pc4lB/HzLYYDRMXtCQctSonwN6m+ZnqClyM2icoUZE\nRERExWKgdgWQqrLBUtRSNcqVpSdU5wZqVjRofIaaIjejxhlqRERERFQsBmpXALE2OzctaZvcQE2f\ns/aVlFFz5DQPYcdHIiIiIioWA7UrgDlnblraUT2pa+fObIua7FdMdim33JGNRIiIiIioWAzUrgC2\n6Y3qPDPJPW1S17Y0ZtdO1zVofoaaIjcgZUaNiIiIiIqln+oHoInnrK/Fy9OWoyYRwFUzZ0/q2lWu\navwms7Z+hmdS155KeRk1zlAjIiIioiIxULsCuKrNOGWbDgCYZ5+81vwAUGUzqmt/w3Vl7E8DmFEj\nIiIiosvD0scrgKvaon6utpkmde1qezZIaXDaRrlSWxx5e9QYqBERERFRcRioXQEanFZYTHLytLnB\nMcbVpeWutqhrz7pqchuZTCVnlTnnz/zKGPJNRERERKXD0scrgMWkx871t8E3GMW8Gc6xv1BCZpMe\nO9bfhr7BKOa3uMb+gkaYlT9zfxRzr53cP3MiIiIiqnwM1K4QM6+qwcyrpmbtWVfVAFO09lSaeVUN\nZk71QxARERFRRWLpIxERERERUZlhoEZERERERFRmGKgRERERERGVGQZqREREREREZYaBGhERERER\nUZlhoEZERERERFRmGKgRERERERGVmYoJ1F588UXcddddaG9vR3t7O+6991688847edfs2rULS5cu\n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\n4Pnnn4fBYJjqxyENW7Zsmfp59uzZaG1txfLly/Hmm2+ipbl4ekUAAAfSSURBVKVlUp+FpY8FqK2t\nhSiKQ6Jgn883JKImGi+32w1JkkZ9z9xuNxKJBILB4IjXECm2bduGd955B//8z/+M+vp69TjfNSol\nvV6P5uZmzJs3D9///vfh8Xiwf/9+vmdUUp9++in6+vqwcuVKzJ8/H/Pnz8fhw4exf/9+LFiwgO8b\nTRiHw4Frr70WZ8+enfT3jIFaAQwGA+bPn4/3339fPSZJEt5//30sXLhwCp+MtKS5uRlutxsffPCB\neiwYDKKzs1N9zxYsWABRFPPexVOnTuHChQt8FynPtm3b8Pvf/x779+9HU1NT3jm+azSR0uk04vE4\n3zMqqVtvvRWvv/46Xn31Vbz22mt47bXXsGDBAtx111147bXX+L7RhAmFQjh79izq6+sn/T0Tt27d\nurUkP4XG2Ww2PP3002hsbITBYMA//MM/4PPPP8ejjz4Ki8Uy1Y9HFSIcDuPkyZPo7e3FgQMH0Nra\nCrPZjEQiAYfDgVQqhT179mDmzJmIx+P42c9+hng8jp/+9KcQRRFGoxE9PT3o6OiAx+PBwMAAHnnk\nETQ1NWH9+vVT/eNRmdi6dSveeOMNPP3006irq0M4HEY4HIYoitDr5Yp3vmtUCk899RQMBgMkSUJX\nVxf27duHN954Az/84Q/R3NzM94xKxmAwwOl05v16/fXX0dzcjLvuugsA/71GpfH444/DZDIBAL78\n8kts3boV/f392Lp1KywWy6S+Z9yjVqA777wT/f39ePrpp+H1ejF37lz86le/gtPpnOpHowry6aef\n4q//+q8hCAIEQcDjjz8OALj77ruxc+dOrFu3DtFoFFu2bEEgEMCiRYuwd+9eGI1G9R4/+clPIIoi\nHnroIcTjcSxbtgyPPPLIVP1IVIZ+85vfQBAE/NVf/VXe8Z07d+Luu+8GAL5rVBI+nw+bN29Gb28v\nHA4H5syZg+eee07tdsb3jCbSpfNI+b5RKXR3d+MHP/gBBgYG4HQ60d7ejgMHDqC2thbA5L5ngiRJ\nUsl+MiIiIiIiIrps3KNGRERERERUZhioERERERERlRkGakRERERERGWGgRoREREREVGZYaBGRERE\nRERUZhioERERERERlRkGakRERERERGWGgRoREREREVGZYaBGRERERERUZhioERGRpu3evRsej2fI\nr7lz52Lv3r2T/jwvv/wyPB4PBgYGJn1tIiKqHPqpfgAiIqKJZrFY8E//9E9Djjc2Nk76swiCAEEQ\nJn1dIiKqLAzUiIhI8wRBQGtr61Q/BhERUcFY+khERFc8j8eDPXv24Mknn8Qtt9yCG2+8ET/+8Y8R\nCoXyrrtw4QIeeughLFq0CAsXLsTatWtx4sSJIfd79dVX8c1vfhOtra1YsmQJvvOd7+DixYt511y8\neBHr1q3DwoULcccdd+DVV1+d0J+RiIgqCwM1IiK6IqRSqSG/cnV0dODUqVN4/PHHsWnTJrz11lvY\nsmWLej4UCmH16tX4wx/+gG3btuHJJ5/EwMAAVq9eje7ubvW6X/3qV/jRj36E66+/Hrt378aOHTtw\nzTXXoK+vT71GkiQ8/PDDWLp0KX75y19i3rx5+MlPfoJTp05N/B8EERFVBJY+EhGR5oXDYcyfPz/v\nmCAI6OjowI033ggAMBqN+OUvf6nuHzOZTPi7v/s7bNiwATNmzMBLL72Erq4uHDp0CDNmzAAALF68\nGF/96lexb98+bN68GcFgEL/4xS9w7733YuvWrepaK1asGPJMq1evxr333gsAuOGGG/Bf//Vf+N3v\nfofvfve7E/FHQEREFYaBGhERaZ7FYkFHRwckSco73tLSon5evnx5XpOPO+64A3/7t3+LY8eOYcaM\nGfjwww9x3XXXqUEaAFRXV+O2227DRx99BAD46KOPEI1G8ed//uejPo8gCLjtttvynq+pqQldXV2X\n9XMSEZF2MFAjIiLNEwQB8+bNG/Ual8uV93u73Q6TyYTe3l4AgN/vh9vtHvZ7X3zxBQBgcHAQAFBf\nXz/mMzkcjrzfGwwGxGKxMb9HRERXBu5RIyIiAuDz+fJ+HwwGEYvF1KCrurp6yDXK92pqagBA/d+e\nnp4JfloiItI6BmpEREQA/vM//zOvNPLf//3fodPpsGDBAgBAe3s7Tpw4gdOnT6vXDA4O4r333kN7\nezsAYOHChTCbzXj55Zcn9dmJiEh7WPpIRESaJ0kSOjs7hxx3Op1obm4GAMTjcTz44IO47777cO7c\nOfz85z/H17/+dXUf28qVK7Fv3z585zvfwd/8zd/AaDTi2WefhcFgwP333w9ALpf83ve+h5///OdI\npVK4/fbbIUkS/ud//gff+MY3hjQ0ISIiGgkDNSIi0rxoNKp2WMx1zz33YPv27QDkLox9fX14+OGH\nkUwmcccdd+CnP/2peq3NZsMLL7yAnTt3YsuWLUilUmhvb8djjz2GhoYG9boHHngALpcL+/btw6uv\nvgqbzYYbbrhhyB64SwmCkNfMhIiIrmyCdGkLLCIioiuMx+PB5s2bsWbNmql+FCIiIgDco0ZERERE\nRFR2GKgREdEVj2WHRERUblj6SEREREREVGaYUSMiIiIiIiozDNSIiIiIiIjKDAM1IiIiIiKiMsNA\njYiIiIiIqMwwUCMiIiIiIiozDNSIiIiIiIjKDAM1IiIiIiKiMsNAjYiIiIiIqMz8f3xxQHDmVgJ3\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f24fd0b48d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.DataFrame(data=results, columns = [\"epoch\", \"batch_acc\", \"train_acc\", \"test_acc\"])\n",
    "df.set_index(\"epoch\", drop=True, inplace=True)\n",
    "\n",
    "fig, ax = plt.subplots(1, 1, figsize=(10, 4))\n",
    " \n",
    "ax.plot(df)\n",
    "ax.set(xlabel='Epoch',\n",
    "       ylabel='Error',\n",
    "       title='Training result')\n",
    " \n",
    "ax.legend(df.columns, loc=1)\n",
    "\n",
    "print \"Maximum test accuracy: %.2f%%\" % np.max(df[\"test_acc\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### 5. Hyper-parameter tuning\n",
    "\n",
    "While the model specification is correct, if you train the model using the previous hyper-parameters, the visualized results will not seem so promising. This can be for a number of reasons, including that the network is too deep or not deep enough, the learning rate is too fast or not fast enough, we are not training for enough epochs, our batch size is either too big or too small, or we can benefit from other regularization strategies such as dropout.\n",
    "\n",
    "Infact, the tuning of hyper-parameters is one of the most difficult problems in applied machine learning, precisely since it is often not clear how these should be set at the outset. While there are some heuristic 'best practice' strategies out there that people have developed, for the most part researchers experiment with different settings for hyper-parameters until they get the results they want.\n",
    "\n",
    "For the last part of the assignment, experiment with different settings for the hyper-parameters specified at the top of the lab. With different combinations of  parameters you should be able to achieve **at least 90% accuracy in the test set** without having to train the model for more than 500 epochs. Once you achieve this accuracy, save your edits and submit your work as a pull request back to the main project."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
